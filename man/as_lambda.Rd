% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lambda.R
\name{as_lambda}
\alias{as_lambda}
\title{Create purrr-style Functions from R Objects}
\usage{
as_lambda(x, envir = parent.frame(), ...)
}
\arguments{
\item{x}{A function, formula, call, or vector}

\item{envir}{environment associated with created function}

\item{...}{arguments passed to methods.}
}
\value{
`function` object
}
\description{
Function creation from formulas, calls, and other R objects, similar to
\code{\link[purrr]{as_mapper}}.
}
\details{
\code{as_lambda} is a convenience function used to quickly create functions for
use in functions throughout the \code{regg} package, similar to lambdas in the
\code{purrr} package. However, there are some minor differences between the
two, as described below, due to how lambdas are used in \code{regg}.

When a function is passed to \code{as_lambda}, it is returned as is.

When a formula is passed to \code{as_lambda}, e.g. \code{~ .x - 5}, the object
on the right-hand side of \code{~} becomes the function body with any variable
prefaced with a period \code{.} following by a letter, e.g. \code{.a} or \code{.z},
becoming an argument name. The argument names are sorted so that \code{~ .b - .a}
becomes \code{function(.a, .b, ...) .b - .a}. Note that \code{..1}, \code{...2},
etc. can be used to reference objects beyond those explicitly labelled. Therefore,
\code{as_lambda} provides more flexibility when creating functions.

Two-sided formula can also be used. In this case, the objects on the left-hand
side of \code{~}, separated by a \code{+}, are interpreted as the variable names
in the resulting functions. For example, \code{i ~ i + 1} is equivalent to
\code{function (i, ...) i + 1}. Similarly, \code{i + j ~ i * j + 1} is equivalent to
\code{function(i, j, ...) i * j + 1}.

Calls that are passed to \code{as_lambda} are treated the same as the right-hand
side of a formula. \code{as_lambda( substitute(sqrt(.x)) )} is equivalent to
\code{function(.x, ...) sqrt(.x)}

One of the main uses of lambdas in \code{regg} is to rename model variables
using \code{:=} inside of \code{\link{reg_select}}. One way that this shows up
is how \code{as_lambda} handles numeric vectors. As with \code{\link[purrr]{as_mapper}},
numeric vectors are converted to functions that extract elements specified by
the numeric vector. The difference is how it handles single, character values.
Here, it will extract the individual characters. For example, \code{as_lambda(2:4)("hello")}
will return \code{"ell"}.
}
\examples{
as_lambda(\(i) i + 1)
as_lambda(seq(1,5, by = 2))
as_lambda(x + y ~ x[1] * y)
as_lambda(~ .x + .y)

}
